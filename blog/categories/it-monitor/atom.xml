<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IT Monitor | 莫俊能的个人博客]]></title>
  <link href="http://mojunneng.github.io/blog/categories/it-monitor/atom.xml" rel="self"/>
  <link href="http://mojunneng.github.io/"/>
  <updated>2014-04-25T01:08:06+08:00</updated>
  <id>http://mojunneng.github.io/</id>
  <author>
    <name><![CDATA[莫俊能]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zabbix学习与研究-架构]]></title>
    <link href="http://mojunneng.github.io/blog/2014/04/24/zabbix-architechture/"/>
    <updated>2014-04-24T15:59:00+08:00</updated>
    <id>http://mojunneng.github.io/blog/2014/04/24/zabbix-architechture</id>
    <content type="html"><![CDATA[<p>Zabbix架构</p>

<!--more-->


<p><img src="http://mojunneng.github.io/aticle_img/zabbix_architechture01.jpg" alt="" /></p>

<p>Zabbix基本数据流</p>

<p><img src="http://mojunneng.github.io/aticle_img/zabbix_architechture02.jpg" alt="" /></p>

<h3>Server</h3>

<p>&emsp;&emsp;Server执行轮询和捕获数据，它计算监控项，给用户发送报警信息。它是Zabbix的核心组件，agent和proxies向它报告系统可用性及完整性的数据。server本身就可以使用简单服务检测来检测远程网络服务（比如web服务器和mail服务器）。</p>

<p>&emsp;&emsp;Server是存储有配置文件、统计信息和操作信息的核心资源库，当被监控系统任何一部分出现问题时，它向管理员发送报警信息。
一个基本的Zabbix Server被分为三个不同的组件：Zabbxi Server、基于Web的管理界面（web frontend）和数据库存储。</p>

<p>&emsp;&emsp;所有的Zabbix配置信息存储在数据库中，Server和frontend与数据库进行交互。例如，当你用frontend或者API创建一个新的监控项时，事实上是被加入到数据库的监控项表。然后，大约一分钟后，Zabbix Server将查询监控项表获取数据库中的可用监控项并把它们存储在Server缓存中。这就是为什么当你在frontend中做任何改变，需要等两分钟后才会在最新数据这一部分反映出来</p>

<p>&emsp;&emsp;数据库存储</p>

<p>所有的配置信息以及Zabbix采集的数据都保存在数据库中。</p>

<p>&emsp;&emsp;WEB 界面</p>

<p>为方便从不同平台去访问管理Zabbix，Zabbix提供了一个基于WEB的界面，可以通过界面实现监控及其各项系统配置管理。WEB界面作为 Zabbix Server的一部分也可以运行在不同的物理服务器上。</p>

<p>&emsp;&emsp;Proxy</p>

<p>在Zabbix的部署中Zabbix Proxy是一个可选的组件。一个Zabbix代理（Proxies）可以代表Zabbix服务器收集性能和可用性数据。这样，代理（Proxies）可以负担采集数据的任务并且减轻Zabbix服务器负载。</p>

<p>同时，使用代理（Proxies）是实施统一和分布式监控的最简单方式，因为所有的客户端和代理（Proxies）向一个Zabbix服务器报告数据，并且所有数据集中保存在服务器数据库。</p>

<p>Zabbix Proxy示意图
<img src="http://mojunneng.github.io/aticle_img/zabbix_architechture03.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zabbix学习与研究-简介与目标]]></title>
    <link href="http://mojunneng.github.io/blog/2014/04/24/zabbix-introduction/"/>
    <updated>2014-04-24T15:14:06+08:00</updated>
    <id>http://mojunneng.github.io/blog/2014/04/24/zabbix-introduction</id>
    <content type="html"><![CDATA[<h3>Zabbix 介绍</h3>

<p>&emsp;&emsp;Zabbix是一个企业级的开源分布式监控解决方案，由一个国外的团队持续维护更新，软件可以自由下载使用，运作团队靠提供收费的技术支持赢利。Zabbix通过C/S模式采集数据，通过B/S模式在web端展示和配置。被监控端：主机通过安装agent方式采集数据，网络设备通过SNMP方式采集数据。<!--more-->Server端：通过收集SNMP和agent发送的数据，写入MySQL数据库，再通过php+apache在web前端展示。Zabbix具备常见的商业监控软件所具备的功能：主机的性能监控、网络设备性能监控、数据库性能监控、FTP等通用协议监控、多种告警方式、详细的报表图表绘制等。Zabbix特点：支持自动发现网络设备和服务器；支持分布式，能集中展示、管理分布式的监控点；扩展性强，server提供通用接口，可以自己开发完善各类监控。</p>

<h3>Zabbix 学习与研究目标</h3>

<p>&emsp;&emsp;熟悉Zabbix基本监控模块；研究API,了解并测试通过API取出实时、历史告警数据以及性能数据；研究报表API，如果采用别的报表组件改如何组织数据；研究告警通知规则设置策略，与现有监控平台的告警通知规则是否可做集成；研究Templates，是否可以通过一键批量设置；研究triggers与actions，其事件处理功能是否能满足监控需求；深入研究Zabbix核心源码。</p>
]]></content>
  </entry>
  
</feed>
